{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/renato/nlw4/aulas/moveit-next/src/contexts/CountdownContext.tsx\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from \"./ChallengesContext\";\nexport const CountdownContext = /*#__PURE__*/createContext({});\nlet countdownTimeout;\nexport function CountdownProvider({\n  children\n}) {\n  const {\n    startNewChallenge\n  } = useContext(ChallengesContext);\n  const {\n    0: time,\n    1: setTime\n  } = useState(0.05 * 60);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setHasFinished(false);\n    setTime(0.05 * 60);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes,\n      seconds,\n      hasFinished,\n      isActive,\n      startCountdown,\n      resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/renato/nlw4/aulas/moveit-next/src/contexts/CountdownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengesContext","CountdownContext","countdownTimeout","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,QAA1D,QAA0E,OAA1E;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAeA,OAAO,MAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAEP,IAAIM,gBAAJ;AAEA,OAAO,SAASC,iBAAT,CAA2B;AAACC,EAAAA;AAAD,CAA3B,EAA8D;AAEnE,QAAM;AAACC,IAAAA;AAAD,MAAsBR,UAAU,CAACG,iBAAD,CAAtC;AAEA,QAAM;AAAA,OAACM,IAAD;AAAA,OAAOC;AAAP,MAAkBR,QAAQ,CAAC,OAAO,EAAR,CAAhC;AACA,QAAM;AAAA,OAAES,QAAF;AAAA,OAAYC;AAAZ,MAA2BV,QAAQ,CAAC,KAAD,CAAzC;AACA,QAAM;AAAA,OAAEW,WAAF;AAAA,OAAeC;AAAf,MAAiCZ,QAAQ,CAAC,KAAD,CAA/C;AAEA,QAAMa,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAAyB;AACvBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,WAASQ,cAAT,GAAyB;AACvBC,IAAAA,YAAY,CAAChB,gBAAD,CAAZ;AACAO,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAJ,IAAAA,OAAO,CAAC,OAAO,EAAR,CAAP;AACD;;AAEDT,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAIU,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAAyB;AACvBJ,MAAAA,gBAAgB,GAAGiB,UAAU,CAAC,MAAI;AAChCZ,QAAAA,OAAO,CAACD,IAAI,GAAC,CAAN,CAAP;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AACjCK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AAClB;AACF,GAVQ,EAUN,CAACG,QAAD,EAAWF,IAAX,CAVM,CAAT;AAYA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AACA,IAAA,KAAK,EAAE;AACHM,MAAAA,OADG;AAEHG,MAAAA,OAFG;AAGHL,MAAAA,WAHG;AAIHF,MAAAA,QAJG;AAKHQ,MAAAA,cALG;AAMHC,MAAAA;AANG,KADP;AAAA,cAUGb;AAVH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from \"./ChallengesContext\";\n\ninterface CountdownContextData {\n  minutes: number;\n  seconds: number;\n  hasFinished: boolean;\n  isActive: boolean;\n  startCountdown:() => void;\n  resetCountdown:() => void;\n}\n\ninterface CountdownProviderProps{\n  children: ReactNode;\n}\n\nexport const CountdownContext = createContext({} as CountdownContextData)\n\nlet countdownTimeout:NodeJS.Timeout;\n\nexport function CountdownProvider({children}:CountdownProviderProps ){\n\n  const {startNewChallenge} = useContext(ChallengesContext);\n\n  const [time, setTime] = useState(0.05 * 60);\n  const [ isActive, setIsActive] = useState(false);\n  const [ hasFinished, setHasFinished] = useState(false);\n\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  function startCountdown(){\n    setIsActive(true);\n  }\n\n  function resetCountdown(){\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setHasFinished(false);\n    setTime(0.05 * 60);\n  }\n\n  useEffect(()=>{\n    if (isActive && time > 0){\n      countdownTimeout = setTimeout(()=>{\n        setTime(time-1);\n      }, 1000)\n    } else if (isActive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time])\n\n  return (\n    <CountdownContext.Provider \n    value={{\n        minutes,\n        seconds,\n        hasFinished,\n        isActive,\n        startCountdown,\n        resetCountdown,\n      }}\n    >\n      {children}\n    </CountdownContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}