{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/renato/nlw4/aulas/moveit-next/src/contexts/ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from 'react';\nimport Cookies from 'js-cookie';\nimport challenges from '../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengeCompleted = _useState3[0],\n      setChallengeCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  var experienceTonNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(function () {\n    Notification.requestPermission();\n  }, []);\n  useEffect(function () {\n    Cookies.set('level', String(level));\n    Cookies.set('currentExperience', String(currentExperience));\n    Cookies.set('challengeCompleted', String(challengeCompleted));\n  }, [level, currentExperience, challengeCompleted]);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n    new Audio('/notification.mp3').play();\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo Desafio', {\n        body: \"Valendo \".concat(challenge.amount, \"xp!\")\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    var amount = activeChallenge.amount;\n    var finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceTonNextLevel) {\n      finalExperience = finalExperience - experienceTonNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengeCompleted(challengeCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      experienceTonNextLevel: experienceTonNextLevel,\n      challengeCompleted: challengeCompleted,\n      activeChallenge: activeChallenge,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge,\n      resetChallenge: resetChallenge,\n      completeChallenge: completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChallengesProvider, \"fy584744dwKCNoxRsnNsn4Pln2I=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["/home/renato/nlw4/aulas/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useEffect","useState","Cookies","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengeCompleted","setChallengeCompleted","activeChallenge","setActiveChallenge","experienceTonNextLevel","Math","pow","Notification","requestPermission","set","String","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","Audio","play","permission","body","amount","resetChallenge","completeChallenge","finalExperience"],"mappings":"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","sourcesContent":["import {createContext, ReactNode, useEffect, useState} from 'react';\nimport Cookies from 'js-cookie';\nimport challenges from '../../challenges.json';\n\ninterface Challenge {\n  type: 'body' | 'eye';\n  description: string;\n  amount: number;\n}\n\ninterface ChallengeContextData {\n  level: number; \n  currentExperience: number;\n  experienceTonNextLevel: number;\n  challengeCompleted: number;\n  activeChallenge: Challenge;\n  levelUp: () => void;\n  startNewChallenge: () => void;\n  resetChallenge:() => void;\n  completeChallenge:() => void;\n  \n}\n\ninterface ChallengesProviderProps{\n  children: ReactNode;\n}\n\nexport const ChallengesContext = createContext({} as ChallengeContextData);\n\nexport function ChallengesProvider({children}:ChallengesProviderProps){\n  const [level, setLevel] = useState(1);\n  const [currentExperience, setCurrentExperience] = useState(0);\n  const [challengeCompleted, setChallengeCompleted] = useState(0);\n\n  const [activeChallenge, setActiveChallenge] = useState(null);\n\n  const experienceTonNextLevel = Math.pow((level+1 )* 4 , 2)\n\n  useEffect(() => {\n    Notification.requestPermission()\n  }, [])\n\n  useEffect(() =>{\n    Cookies.set('level', String(level));\n    Cookies.set('currentExperience', String(currentExperience));\n    Cookies.set('challengeCompleted', String(challengeCompleted));\n  }, [level, currentExperience, challengeCompleted])\n\n  function levelUp(){\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge(){\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\n    const challenge = challenges[randomChallengeIndex];\n\n    setActiveChallenge(challenge);\n\n    new Audio('/notification.mp3').play();\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo Desafio', {\n        body: `Valendo ${challenge.amount}xp!`\n      })\n    }\n  }\n\n  function resetChallenge(){\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge(){\n    if (!activeChallenge){\n      return;\n    }\n\n    const { amount } = activeChallenge;\n\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceTonNextLevel){\n      finalExperience = finalExperience - experienceTonNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengeCompleted(challengeCompleted + 1);\n\n  }\n\n  return (\n    <ChallengesContext.Provider \n      value={{\n        level, \n        currentExperience, \n        experienceTonNextLevel,\n        challengeCompleted, \n        activeChallenge,\n        levelUp,\n        startNewChallenge,\n        resetChallenge,\n        completeChallenge,\n        \n      }}\n    >\n      {children}\n    </ChallengesContext.Provider>\n  );\n  \n}\n"]},"metadata":{},"sourceType":"module"}