{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/renato/nlw4/aulas/moveit-next/src/contexts/ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(30),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengeCompleted = _useState3[0],\n      setChallengeCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  var experienceTonNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      experienceTonNextLevel: experienceTonNextLevel,\n      challengeCompleted: challengeCompleted,\n      activeChallenge: activeChallenge,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge,\n      resetChallenge: resetChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChallengesProvider, \"HUkIYYy9JXJJqmBAjDo6pNcWEnE=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["/home/renato/nlw4/aulas/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengeCompleted","setChallengeCompleted","activeChallenge","setActiveChallenge","experienceTonNextLevel","Math","pow","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","resetChallenge"],"mappings":";;;;;AAAA,SAAQA,aAAR,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAwBA,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,OAA+D;AAAA;;AAAA,MAAlCC,QAAkC,QAAlCA,QAAkC;;AAAA,kBAC1CJ,QAAQ,CAAC,CAAD,CADkC;AAAA,MAC7DK,KAD6D;AAAA,MACtDC,QADsD;;AAAA,mBAElBN,QAAQ,CAAC,EAAD,CAFU;AAAA,MAE7DO,iBAF6D;AAAA,MAE1CC,oBAF0C;;AAAA,mBAGhBR,QAAQ,CAAC,CAAD,CAHQ;AAAA,MAG7DS,kBAH6D;AAAA,MAGzCC,qBAHyC;;AAAA,mBAKtBV,QAAQ,CAAC,IAAD,CALc;AAAA,MAK7DW,eAL6D;AAAA,MAK5CC,kBAL4C;;AAOpE,MAAMC,sBAAsB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAC,CAAP,IAAY,CAArB,EAAyB,CAAzB,CAA/B;;AAEA,WAASW,OAAT,GAAkB;AAChBV,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,WAASY,iBAAT,GAA4B;AAC1B,QAAMC,oBAAoB,GAAGJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACM,MAAL,KAAgBnB,UAAU,CAACoB,MAAtC,CAA7B;AACA,QAAMC,SAAS,GAAGrB,UAAU,CAACiB,oBAAD,CAA5B;AAEAN,IAAAA,kBAAkB,CAACU,SAAD,CAAlB;AACD;;AAED,WAASC,cAAT,GAAyB;AACvBX,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAED,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AACE,IAAA,KAAK,EAAE;AACLP,MAAAA,KAAK,EAALA,KADK;AAELE,MAAAA,iBAAiB,EAAjBA,iBAFK;AAGLM,MAAAA,sBAAsB,EAAtBA,sBAHK;AAILJ,MAAAA,kBAAkB,EAAlBA,kBAJK;AAKLE,MAAAA,eAAe,EAAfA,eALK;AAMLK,MAAAA,OAAO,EAAPA,OANK;AAOLC,MAAAA,iBAAiB,EAAjBA,iBAPK;AAQLM,MAAAA,cAAc,EAAdA;AARK,KADT;AAAA,cAaGnB;AAbH;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GA1CeD,kB;;KAAAA,kB","sourcesContent":["import {createContext, ReactNode, useState} from 'react';\nimport challenges from '../../challenges.json';\n\ninterface Challenge {\n  type: 'body' | 'eye';\n  description: string;\n  amount: number;\n}\n\ninterface ChallengeContextData {\n  level: number; \n  currentExperience: number;\n  experienceTonNextLevel: number;\n  challengeCompleted: number;\n  activeChallenge: Challenge;\n  levelUp: () => void;\n  startNewChallenge: () => void;\n  resetChallenge:() => void;\n  \n}\n\ninterface ChallengesProviderProps{\n  children: ReactNode;\n}\n\nexport const ChallengesContext = createContext({} as ChallengeContextData);\n\nexport function ChallengesProvider({children}:ChallengesProviderProps){\n  const [level, setLevel] = useState(1);\n  const [currentExperience, setCurrentExperience] = useState(30);\n  const [challengeCompleted, setChallengeCompleted] = useState(0);\n\n  const [activeChallenge, setActiveChallenge] = useState(null);\n\n  const experienceTonNextLevel = Math.pow((level+1 )* 4 , 2)\n\n  function levelUp(){\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge(){\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\n    const challenge = challenges[randomChallengeIndex];\n\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge(){\n    setActiveChallenge(null);\n  }\n\n  return (\n    <ChallengesContext.Provider \n      value={{\n        level, \n        currentExperience, \n        experienceTonNextLevel,\n        challengeCompleted, \n        activeChallenge,\n        levelUp,\n        startNewChallenge,\n        resetChallenge,\n        \n      }}\n    >\n      {children}\n    </ChallengesContext.Provider>\n  );\n  \n}\n"]},"metadata":{},"sourceType":"module"}