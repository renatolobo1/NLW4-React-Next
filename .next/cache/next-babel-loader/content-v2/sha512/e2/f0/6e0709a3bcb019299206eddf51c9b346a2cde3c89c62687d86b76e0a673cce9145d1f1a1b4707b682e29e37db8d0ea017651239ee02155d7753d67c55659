{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/renato/nlw4/aulas/moveit-next/src/contexts/ChallengesContext.tsx\";\nimport { createContext, useEffect, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengeCompleted,\n    1: setChallengeCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceTonNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n    new Audio('/notification.mp3');\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo Desafio', {\n        body: `Valendo ${challenge.amount}xp!`\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceTonNextLevel) {\n      finalExperience = finalExperience - experienceTonNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengeCompleted(challengeCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      experienceTonNextLevel,\n      challengeCompleted,\n      activeChallenge,\n      levelUp,\n      startNewChallenge,\n      resetChallenge,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/renato/nlw4/aulas/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useEffect","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengeCompleted","setChallengeCompleted","activeChallenge","setActiveChallenge","experienceTonNextLevel","Math","pow","Notification","requestPermission","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","Audio","permission","body","amount","resetChallenge","completeChallenge","finalExperience"],"mappings":";;AAAA,SAAQA,aAAR,EAAkCC,SAAlC,EAA6CC,QAA7C,QAA4D,OAA5D;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAyBA,OAAO,MAAMC,iBAAiB,gBAAGJ,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASK,kBAAT,CAA4B;AAACC,EAAAA;AAAD,CAA5B,EAA+D;AACpE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACO,iBAAD;AAAA,OAAoBC;AAApB,MAA4CR,QAAQ,CAAC,CAAD,CAA1D;AACA,QAAM;AAAA,OAACS,kBAAD;AAAA,OAAqBC;AAArB,MAA8CV,QAAQ,CAAC,CAAD,CAA5D;AAEA,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAC,IAAD,CAAtD;AAEA,QAAMa,sBAAsB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAC,CAAP,IAAY,CAArB,EAAyB,CAAzB,CAA/B;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,YAAY,CAACC,iBAAb;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASC,OAAT,GAAkB;AAChBZ,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,WAASc,iBAAT,GAA4B;AAC1B,UAAMC,oBAAoB,GAAGN,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACQ,MAAL,KAAgBrB,UAAU,CAACsB,MAAtC,CAA7B;AACA,UAAMC,SAAS,GAAGvB,UAAU,CAACmB,oBAAD,CAA5B;AAEAR,IAAAA,kBAAkB,CAACY,SAAD,CAAlB;AAEA,QAAIC,KAAJ,CAAU,mBAAV;;AAEA,QAAIT,YAAY,CAACU,UAAb,KAA4B,SAAhC,EAA2C;AACzC,UAAIV,YAAJ,CAAiB,cAAjB,EAAiC;AAC/BW,QAAAA,IAAI,EAAG,WAAUH,SAAS,CAACI,MAAO;AADH,OAAjC;AAGD;AACF;;AAED,WAASC,cAAT,GAAyB;AACvBjB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAED,WAASkB,iBAAT,GAA4B;AAC1B,QAAI,CAACnB,eAAL,EAAqB;AACnB;AACD;;AAED,UAAM;AAAEiB,MAAAA;AAAF,QAAajB,eAAnB;AAEA,QAAIoB,eAAe,GAAGxB,iBAAiB,GAAGqB,MAA1C;;AAEA,QAAIG,eAAe,IAAIlB,sBAAvB,EAA8C;AAC5CkB,MAAAA,eAAe,GAAGA,eAAe,GAAGlB,sBAApC;AACAK,MAAAA,OAAO;AACR;;AAEDV,IAAAA,oBAAoB,CAACuB,eAAD,CAApB;AACAnB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,qBAAqB,CAACD,kBAAkB,GAAG,CAAtB,CAArB;AAED;;AAED,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AACE,IAAA,KAAK,EAAE;AACLJ,MAAAA,KADK;AAELE,MAAAA,iBAFK;AAGLM,MAAAA,sBAHK;AAILJ,MAAAA,kBAJK;AAKLE,MAAAA,eALK;AAMLO,MAAAA,OANK;AAOLC,MAAAA,iBAPK;AAQLU,MAAAA,cARK;AASLC,MAAAA;AATK,KADT;AAAA,cAcG1B;AAdH;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD","sourcesContent":["import {createContext, ReactNode, useEffect, useState} from 'react';\nimport challenges from '../../challenges.json';\n\ninterface Challenge {\n  type: 'body' | 'eye';\n  description: string;\n  amount: number;\n}\n\ninterface ChallengeContextData {\n  level: number; \n  currentExperience: number;\n  experienceTonNextLevel: number;\n  challengeCompleted: number;\n  activeChallenge: Challenge;\n  levelUp: () => void;\n  startNewChallenge: () => void;\n  resetChallenge:() => void;\n  completeChallenge:() => void;\n  \n}\n\ninterface ChallengesProviderProps{\n  children: ReactNode;\n}\n\nexport const ChallengesContext = createContext({} as ChallengeContextData);\n\nexport function ChallengesProvider({children}:ChallengesProviderProps){\n  const [level, setLevel] = useState(1);\n  const [currentExperience, setCurrentExperience] = useState(0);\n  const [challengeCompleted, setChallengeCompleted] = useState(0);\n\n  const [activeChallenge, setActiveChallenge] = useState(null);\n\n  const experienceTonNextLevel = Math.pow((level+1 )* 4 , 2)\n\n  useEffect(() => {\n    Notification.requestPermission()\n  }, [])\n\n  function levelUp(){\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge(){\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\n    const challenge = challenges[randomChallengeIndex];\n\n    setActiveChallenge(challenge);\n\n    new Audio('/notification.mp3');\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo Desafio', {\n        body: `Valendo ${challenge.amount}xp!`\n      })\n    }\n  }\n\n  function resetChallenge(){\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge(){\n    if (!activeChallenge){\n      return;\n    }\n\n    const { amount } = activeChallenge;\n\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceTonNextLevel){\n      finalExperience = finalExperience - experienceTonNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengeCompleted(challengeCompleted + 1);\n\n  }\n\n  return (\n    <ChallengesContext.Provider \n      value={{\n        level, \n        currentExperience, \n        experienceTonNextLevel,\n        challengeCompleted, \n        activeChallenge,\n        levelUp,\n        startNewChallenge,\n        resetChallenge,\n        completeChallenge,\n        \n      }}\n    >\n      {children}\n    </ChallengesContext.Provider>\n  );\n  \n}\n"]},"metadata":{},"sourceType":"module"}